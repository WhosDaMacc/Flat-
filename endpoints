from fastapi import Depends, HTTPException, status
from fastapi_limiter.depends import RateLimiter

@app.post("/token", summary="Authenticate user", response_description="JWT access token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    if form_data.username != "user" or form_data.password != "password":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return {"access_token": create_jwt(form_data.username), "token_type": "bearer"}

@app.post("/chat/{user_id}", dependencies=[Depends(RateLimiter(times=10, seconds=60))], summary="Process chat message", response_description="Assistant's response")
async def chat(user_id: str, chat_message: ChatMessage, api_key: str = Depends(validate_api_key)):
    assistant = await get_or_create_assistant(user_id)
    response = assistant.chat(chat_message.message)
    return {"response": response}

@app.post("/memory/{user_id}", dependencies=[Depends(RateLimiter(times=5, seconds=60))], summary="Save conversation state", response_description="Memory operation status")
async def save_memory(user_id: str, api_key: str = Depends(validate_api_key)):
    assistant = await get_assistant(user_id)
    if not assistant:
        raise HTTPException(status_code=404, detail="User session not found")
    assistant.persist_memory()
    return {"status": "Memory saved successfully"}